#include <iostream>
#include "vector"
#include "string"
#include "algorithm"
#include "queue"
#include "unordered_map"

#define ll long long
#define inf 0x3f3f3f3f
#define ls st<<1
#define rs st<<1|1
#define mid (l+r)/2
using namespace std;
#define MAX 500500
int deg[MAX*4];
int lazy[MAX*4];
void push_up(int st){//上溯
    deg[st]=deg[ls]+deg[rs];
}
void push_down(int st,int ln,int rn){//下溯
    if(lazy[st]){
        lazy[ls]+=lazy[st];
        lazy[rs]+=lazy[st];
        deg[ls]+=lazy[st]*ln;
        deg[rs]+=lazy[st]*rn;
        lazy[st]=0;
    }
}
void build(int st,int l,int r){//建树
    lazy[st]=0;
    if(l==r) {
        deg[st]=0;
        return;
    }
    build(ls,l,mid);
    build(rs,mid+1,r);
    push_up(st);
}
int ask_point(int pos,int st,int l,int r){//点查询
    if(l==r&&l==pos) {
        return deg[st];
    }
    push_down(st,mid-l+1,r-mid);
    if(pos<=mid) return ask_point(pos,ls,l,mid);
    else return ask_point(pos,rs,mid+1,r);
}
void change_point(int x,int pos,int st,int l,int r){//点修改
    if(l==r&&l==pos) {
        deg[st]+=x;
        return;
    }
    push_down(st,mid-l-1,r-mid);
    if(pos<=mid) change_point(x,pos,ls,l,mid);
    else change_point(x,pos,rs,mid+1,r);
    push_up(st);
}
int ask_interval(int tl,int tr,int st,int l,int r){//区间查询
    if(tl<=l&&r<=tr) {
        return deg[st];
    }
    push_down(st,mid-l-1,r-mid);
    int res=0;
    if(tl<=mid) res+=ask_interval(tl,tr,ls,l,mid);
    if(mid<tr) res+=ask_interval(tl,tr,rs,mid+1,r);
    return res;
}
void change_interval(int x,int tl,int tr,int st,int l,int r){//区间修改
    if(tl<=l&&r<=tr) {
        deg[st]+=x*(r-l+1);
        lazy[st]+=x;
        return;
    }
    push_down(st,mid-l+1,r-mid);
    if(tl<=mid) change_interval(x,tl,tr,ls,l,mid);
    if(tr>mid) change_interval(x,tl,tr,rs,mid+1,r);
    push_up(st);
}
